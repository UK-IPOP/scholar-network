{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Home"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"api_reference/","text":"API Reference This page lists all function and class documentation. For example: src.scholar_network.models.CustomCounter dataclass Custom counter class built to emulate Counter from std lib. This class utilizes a specific use case for this program, and uses 'reflexive tuple matching' to get synonymous pairs. Parameters: Name Type Description Default lst A list of author-tuple pairs. required most_common ( self , limit = None ) Sorts and returns ordered tuple pairs. Parameters: Name Type Description Default limit Optional[int] Limit to return. Defaults to None. None Returns: Type Description list list[tuple[tuple[str, str], int]]: Returns most common tuple pairs. Source code in scholar_network/models.py def most_common ( self , limit : Union [ int , None ] = None ) -> list [ tuple [ tuple [ str , str ], int ]]: \"\"\"Sorts and returns ordered tuple pairs. Args: limit (Union[int, None], optional): Limit to return. Defaults to None. Returns: list[tuple[tuple[str, str], int]]: Returns most common tuple pairs. \"\"\" ordered_keys = sorted ( self . counts , key = lambda x : self . counts [ x ], reverse = True ) ordered_result : list [ tuple [ tuple [ str , str ], int ]] = [] for item in ordered_keys : ordered_result . append (( item , self . counts [ item ])) return ordered_result [: limit ] if limit else ordered_result","title":"API Reference"},{"location":"api_reference/#api-reference","text":"This page lists all function and class documentation. For example:","title":"API Reference"},{"location":"api_reference/#src.scholar_network.models.CustomCounter","text":"Custom counter class built to emulate Counter from std lib. This class utilizes a specific use case for this program, and uses 'reflexive tuple matching' to get synonymous pairs. Parameters: Name Type Description Default lst A list of author-tuple pairs. required","title":"CustomCounter"},{"location":"api_reference/#src.scholar_network.models.CustomCounter.most_common","text":"Sorts and returns ordered tuple pairs. Parameters: Name Type Description Default limit Optional[int] Limit to return. Defaults to None. None Returns: Type Description list list[tuple[tuple[str, str], int]]: Returns most common tuple pairs. Source code in scholar_network/models.py def most_common ( self , limit : Union [ int , None ] = None ) -> list [ tuple [ tuple [ str , str ], int ]]: \"\"\"Sorts and returns ordered tuple pairs. Args: limit (Union[int, None], optional): Limit to return. Defaults to None. Returns: list[tuple[tuple[str, str], int]]: Returns most common tuple pairs. \"\"\" ordered_keys = sorted ( self . counts , key = lambda x : self . counts [ x ], reverse = True ) ordered_result : list [ tuple [ tuple [ str , str ], int ]] = [] for item in ordered_keys : ordered_result . append (( item , self . counts [ item ])) return ordered_result [: limit ] if limit else ordered_result","title":"most_common()"}]}